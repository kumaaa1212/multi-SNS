
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  detectRuntime,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.3.1
 * Query Engine version: 61e140623197a131c2a6189271ffee05a7aa9a59
 */
Prisma.prismaVersion = {
  client: "5.3.1",
  engine: "61e140623197a131c2a6189271ffee05a7aa9a59"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  password: 'password',
  team: 'team',
  icon: 'icon',
  bio: 'bio',
  twitterURL: 'twitterURL',
  teamURL: 'teamURL',
  createdAt: 'createdAt'
};

exports.Prisma.FollowScalarFieldEnum = {
  id: 'id',
  bio: 'bio',
  name: 'name',
  icon: 'icon',
  team: 'team',
  twitterURL: 'twitterURL',
  teamURL: 'teamURL',
  frendId: 'frendId',
  userId: 'userId'
};

exports.Prisma.FollowerScalarFieldEnum = {
  id: 'id',
  bio: 'bio',
  name: 'name',
  icon: 'icon',
  team: 'team',
  twitterURL: 'twitterURL',
  teamURL: 'teamURL',
  frendId: 'frendId',
  userId: 'userId'
};

exports.Prisma.PostScalarFieldEnum = {
  id: 'id',
  content: 'content',
  title: 'title',
  createdAt: 'createdAt',
  authorId: 'authorId',
  authorName: 'authorName',
  authorAvatar: 'authorAvatar',
  thumbnailText: 'thumbnailText',
  thumbnailImg: 'thumbnailImg'
};

exports.Prisma.LikeScalarFieldEnum = {
  id: 'id',
  postId: 'postId',
  authorId: 'authorId'
};

exports.Prisma.BookmarkScalarFieldEnum = {
  id: 'id',
  postId: 'postId',
  authorId: 'authorId'
};

exports.Prisma.PostLabelScalarFieldEnum = {
  id: 'id',
  label: 'label',
  name: 'name',
  league: 'league',
  img: 'img',
  postId: 'postId'
};

exports.Prisma.TweetScalarFieldEnum = {
  id: 'id',
  content: 'content',
  createdAt: 'createdAt',
  img: 'img',
  authorId: 'authorId',
  authorName: 'authorName',
  authorAvatar: 'authorAvatar',
  label: 'label'
};

exports.Prisma.TweetLikeScalarFieldEnum = {
  id: 'id',
  tweetId: 'tweetId',
  authorId: 'authorId'
};

exports.Prisma.BoardRoomScalarFieldEnum = {
  roomId: 'roomId',
  team: 'team',
  createdAt: 'createdAt'
};

exports.Prisma.BoardScalarFieldEnum = {
  id: 'id',
  roomId: 'roomId',
  content: 'content',
  createdAt: 'createdAt',
  authorId: 'authorId',
  authorName: 'authorName',
  authorAvatar: 'authorAvatar'
};

exports.Prisma.BoardLikeScalarFieldEnum = {
  id: 'id',
  boardId: 'boardId',
  authorId: 'authorId'
};

exports.Prisma.BoardMessageScalarFieldEnum = {
  id: 'id',
  content: 'content',
  createdAt: 'createdAt',
  authorId: 'authorId',
  authorName: 'authorName',
  authorAvatar: 'authorAvatar',
  boardId: 'boardId'
};

exports.Prisma.RoomScalarFieldEnum = {
  id: 'id',
  user1Id: 'user1Id',
  user1Name: 'user1Name',
  user1Icon: 'user1Icon',
  user2Id: 'user2Id',
  user2Icon: 'user2Icon',
  user2Name: 'user2Name',
  createdAt: 'createdAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  content: 'content',
  createdAt: 'createdAt',
  authorId: 'authorId',
  senderId: 'senderId',
  roomId: 'roomId'
};

exports.Prisma.KeepPostScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  authorId: 'authorId',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  Follow: 'Follow',
  Follower: 'Follower',
  Post: 'Post',
  Like: 'Like',
  Bookmark: 'Bookmark',
  PostLabel: 'PostLabel',
  Tweet: 'Tweet',
  TweetLike: 'TweetLike',
  BoardRoom: 'BoardRoom',
  Board: 'Board',
  BoardLike: 'BoardLike',
  BoardMessage: 'BoardMessage',
  Room: 'Room',
  Message: 'Message',
  KeepPost: 'KeepPost'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        const runtime = detectRuntime()
        const edgeRuntimeName = {
          'workerd': 'Cloudflare Workers',
          'deno': 'Deno and Deno Deploy',
          'netlify': 'Netlify Edge Functions',
          'edge-light': 'Vercel Edge Functions',
        }[runtime]

        let message = 'PrismaClient is unable to run in '
        if (edgeRuntimeName !== undefined) {
          message += edgeRuntimeName + '. As an alternative, try Accelerate: https://pris.ly/d/accelerate.'
        } else {
          message += 'this browser environment, or has been bundled for the browser (running in `' + runtime + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://github.com/prisma/prisma/issues`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
